#!/bin/bash
#
# Create and apply the Cloud One Conformity custom role and Reader role to subscriptions

# This will stop the script when an error is returned from any of the CLI commands
set -e

readonly DEFAULT_APP_REGISTRATION_NAME="Conformity Azure access"
readonly APPLICATION_KEY_NAME="Conformity Key"
readonly CUSTOM_ROLE_NAME="Custom Role - Cloud One Conformity"

option_error_and_exit() {
  echo "Error: Answer doesn't match any option."
  exit 1
}

get_application_id_of_default_app_registration() {
  application_id=$(az ad app list --query "[?displayName == to_string('${DEFAULT_APP_REGISTRATION_NAME}')].appId" --output tsv)
}

create_app_registration() {
  local attempts_to_retrieve_application_id

  attempts_to_retrieve_application_id=0

  echo "App Registration:"

  echo " - Creating App Registration..."

  # create App Registration and add API permissions
  az ad app create \
    --display-name "${DEFAULT_APP_REGISTRATION_NAME}" \
    --required-resource-accesses @manifest.json > /dev/null

  echo " - Checking if App Registration has been created..."

  # It can take a bit of time for the application to be available to use so query until it is available
  while [[ -z "${application_id}" ]] && [[ attempts_to_retrieve_application_id -lt 8 ]]; do
    sleep 5
    attempts_to_retrieve_application_id=$((attempts_to_retrieve_application_id + 1))
    get_application_id_of_default_app_registration
  done

  if [[ -z "${application_id}" ]] || [[ "${application_id}" == "null" ]]; then
    echo "Error: Failed to create App registration."
    exit 1
  fi

  echo " - App Registration has been successfully created."

  echo " - Generating Application Secret key for App registration."
  application_key_value=$(az ad app credential reset --id "${application_id}" --display-name "${APPLICATION_KEY_NAME}" --query "password" --output tsv)

  echo " - Creating service principal..."

  # create service principal
  az ad sp create --id "${application_id}" >/dev/null

  # wait for service principle creation to be applied in the system
  sleep 18

  echo " - Granting admin consent to api permissions..."

  # grant an admin-consent to newly created permissions
  while true; do

    # get the number of API permissions added
    while IFS='' read -r line; do
      permission_list+=("$line")
    done < <(az ad app permission list --id "${application_id}" --output tsv)

    permission_list_length=${#permission_list[@]}

    # check if number of API permissions added are two
    if [[ $permission_list_length -eq 2 ]]; then
      # This is to enable the script to continue in case of an error
      set +e
      # in case of an error while granting admin consent the echo command will run instead
      az ad app permission admin-consent --id "${application_id}" 2>/dev/null || echo "Error: Failed to grant admin consent to api permissions. Please grant it manually via the Azure Portal."
      set -e
      break
    fi

  done
}

update_app_registrations_permissions() {
  az ad app update \
    --id "${application_id}" \
    --required-resource-accesses @manifest.json >/dev/null

  echo "The permissions for the \"${application_display_name}\" App Registration have been updated"
}
# utility method to join arrays by the character passed in the first argument
array_join() {
  local IFS="$1"
  shift
  echo "$*"
}

check_for_custom_role_availability() {
  echo " - Checking if custom role definition has been created..."
  custom_role_definition_id=$(az role definition list --name "${CUSTOM_ROLE_NAME}" --query "[0].name" --output tsv)
}

generate_custom_role_definition() {
  local subscription_ids_in_active_directory=("$@")
  local assignable_scopes

  # generate set of assignable scopes for the custom role
  for subscription in "${subscription_ids_in_active_directory[@]}"; do
    # prefix subscription id with "/subscriptions/" as is needed when added to the assignable scopes
    prefixed_ids=("${prefixed_ids[@]}" "\"/subscriptions/${subscription}\"")
  done

  assignable_scopes=$(array_join , "${prefixed_ids[@]}")

  echo "{ \
      \"Name\": \"${CUSTOM_ROLE_NAME}\", \
      \"Description\": \"Subscription level custom role for Cloud Conformity access.\", \
      \"Actions\": [ \
          \"Microsoft.AppConfiguration/configurationStores/ListKeyValue/action\", \
          \"Microsoft.Network/networkWatchers/queryFlowLogStatus/action\", \
          \"Microsoft.Web/sites/config/list/Action\", \
          \"Microsoft.Storage/storageAccounts/queueServices/queues/read\" \
      ], \
      \"DataActions\": [], \
      \"NotDataActions\": [], \
      \"AssignableScopes\": [${assignable_scopes}] \
    }"
}

create_custom_role() {
  local subscription_ids_in_active_directory=("$@")
  local attempts_to_retrieve_role=0
  local role_definition

  echo " - Creating custom role definition..."

  role_definition=$(generate_custom_role_definition "${subscription_ids_in_active_directory[@]}")

  az role definition create \
    --role-definition "${role_definition}" >/dev/null

  # It can take a bit of time for the role to be available to use so query until it is available
  while [[ -z "${custom_role_definition_id}" ]] && [[ attempts_to_retrieve_role -lt 8 ]]; do
    sleep 5
    attempts_to_retrieve_role=$((attempts_to_retrieve_role + 1))
    check_for_custom_role_availability
  done

  if [[ -z "${custom_role_definition_id}" ]] || [[ "${custom_role_definition_id}" == "null" ]]; then
    echo "Error: Custom role creation failed"
    exit 1
  fi

  echo " - Custom role definition created (${custom_role_definition_id})"
}

update_custom_role() {
  local subscription_ids_in_active_directory=("$@")
  local attempts_to_retrieve_role=0
  local role_definition

  echo " - Updating custom role definition..."

  role_definition=$(generate_custom_role_definition "${subscription_ids_in_active_directory[@]}")

  az role definition update \
    --role-definition "${role_definition}" >/dev/null

  echo " - Custom role definition updated (${custom_role_definition_id})"
}

apply_roles_to_subscription() {
  local subscription_id="${1}"
  local service_principal_id="${2}"
  local is_custom_role_assigned
  local is_reader_role_assigned

  echo "- Subscription: ${subscription_id}"

  echo "  - Checking custom role assignment..."

  is_custom_role_assigned=$(az role assignment list \
    --role "${custom_role_definition_id}" \
    --subscription="${subscription_id}" \
    --assignee "${service_principal_id}" \
    --query "[0].id" \
    --output tsv)

  if [[ -z "${is_custom_role_assigned}" ]] || [[ "${is_custom_role_assigned}" == "null" ]]; then
    echo "  - Assigning custom role..."

    az role assignment create \
      --role "${custom_role_definition_id}" \
      --assignee "${service_principal_id}" \
      --subscription "${subscription_id}" >/dev/null
  fi

  echo "  - Custom role assigned"

  echo "  - Checking built-in \"Reader\" role assignment..."

  # retrieve built-in "Reader" role
  reader_role_id=$(az role definition list --name Reader --query "[0].name" --output tsv)

  # check if role is already assigned
  is_reader_role_assigned=$(az role assignment list \
    --role "${reader_role_id}" \
    --subscription="${subscription_id}" \
    --assignee "${service_principal_id}" \
    --query "[0].id" \
    --output tsv)

  if [[ -z "${is_reader_role_assigned}" ]] || [[ "${is_reader_role_assigned}" == "null" ]]; then
    echo "  - Assigning built-in \"Reader\" role..."
    az role assignment create \
      --role Reader \
      --assignee "${service_principal_id}" \
      --subscription "${subscription_id}" >/dev/null
  fi

  echo "  - \"Reader\" role assigned"
}

main() {
  local application_id
  local subscription_id
  local subscription_ids_in_active_directory
  local service_principal_id
  local CREATE_APP
  local UPDATE_ROLE

  UPDATE_ROLE='false'
  UPDATE_PERMISSIONS='false'
  CREATE_APP='false'

  echo "This script will create the necessary resources for Cloud One Conformity to scan your Azure subscriptions."

  read -rp "Would you like to use the default App Registration \"${DEFAULT_APP_REGISTRATION_NAME}\" [Y|N]? " answer
  case "${answer}" in
  [yY] | [yY][eE][sS])
    echo "Checking if an App Registration with the name \"${DEFAULT_APP_REGISTRATION_NAME}\" exists..."
    get_application_id_of_default_app_registration
    if [[ -z "${application_id}" ]]; then
      echo "App Registration \"${DEFAULT_APP_REGISTRATION_NAME}\" will be created as it wasn't found."
      CREATE_APP='true'
      create_app_registration
    else
      update_azure_graph_permission
      echo "App Registration \"${DEFAULT_APP_REGISTRATION_NAME}\" found."
    fi
    application_display_name=${DEFAULT_APP_REGISTRATION_NAME}
    ;;
  [nN] | [nN][oO])
    while true; do
      read -rp "Please type in the App Registration id (application id): " application_id
      application_display_name=$(az ad app list --query "[?appId == '${application_id}'].displayName" --output tsv)
      if [[ -n "${application_display_name}" ]]; then
        echo "App Registration \"${application_display_name}\" found."
        break
      fi
      echo "App Registration wasn't found. Please try again."
    done
    ;;
  *)
    option_error_and_exit
    ;;
  esac

  readonly CREATE_APP

  if [[ "${CREATE_APP}" == 'false' ]]; then
    read -rp "Would you like to update the permissions for the \"${application_display_name}\" App Registration [Y|N]? " answer
    case "${answer}" in
    [yY] | [yY][eE][sS])
      UPDATE_PERMISSIONS='true'
      ;;
    *)
      option_error_and_exit
      ;;
    esac

    readonly UPDATE_PERMISSIONS

    # update permission for the existing App
    if [[ "${UPDATE_PERMISSIONS}" == 'true' ]]; then
      update_app_registrations_permissions
      echo "Finished."
      exit 0
    fi

    read -rp "Would you like to add new subscriptions to the assignable scopes of the custom role \"${CUSTOM_ROLE_NAME}\" [Y|N]? " answer
    case "${answer}" in
    [yY] | [yY][eE][sS])
      UPDATE_ROLE='true'
      ;;
    [nN] | [nN][oO])
      echo "Custom role \"${CUSTOM_ROLE_NAME}\" will not be applied to new subscriptions."
      ;;
    *)
      option_error_and_exit
      ;;
    esac
  fi

  readonly UPDATE_ROLE

  if [[ "${UPDATE_ROLE}" == 'false' ]]; then
    read -rp "Would you like to apply \"${CUSTOM_ROLE_NAME}\" to a all subscriptions [Y|N]? " answer
    case "${answer}" in
    [yY] | [yY][eE][sS])
      echo "\"${CUSTOM_ROLE_NAME}\" will be applied to all subscriptions."
      ;;
    [nN] | [nN][oO])
      while true; do
        read -rp "Please type in the subscription id: " subscription_id
        subscription_name=$(az account list --query "[? id == '$subscription_id'].name" --output tsv)
        if [[ -n "${subscription_name}" ]]; then
          echo "Subscription \"${subscription_name}\" found."
          break
        fi
        echo "Subscription wasn't found. Please type in the correct subscription id."
      done
      ;;
    *)
      option_error_and_exit
      ;;
    esac
  fi

  # retrieving Tenant id for Active Directory
  tenant_id=$(az ad sp show --id "${application_id}" --query "appOwnerOrganizationId" --output tsv)

  # ensure list of subscriptions is up to date with the server
  az account list --refresh >/dev/null

  # retrieve list of all subscriptions in the Active Directory and convert into a bash array
  subscription_ids_in_active_directory=()

  # Bash v3 supported method of converting to an array ref: https://github.com/koalaman/shellcheck/wiki/SC2207
  while IFS='' read -r line; do
    subscription_ids_in_active_directory+=("$line")
  done < <(az account list --query "[?tenantId=='${tenant_id}'].id" --output tsv)

  echo "Configuring custom \"${CUSTOM_ROLE_NAME}\" role definition:"

  # This will set a global variable if the custom role has been created
  check_for_custom_role_availability

  if [[ "${UPDATE_ROLE}" == 'true' ]]; then
    if [[ -z "${custom_role_definition_id}" ]] || [[ "${custom_role_definition_id}" == "null" ]]; then
      echo "Error: Failed to update role as custom role definition not found"
      exit 1
    fi

    update_custom_role "${subscription_ids_in_active_directory[@]}"
    echo "It may take the Azure system a few minutes to reflect the changes"
    echo "Please wait a few minutes before attempting to apply the updated role to any new subscriptions"
    echo "Finished."
    exit 0
  fi

  if [[ -z "${custom_role_definition_id}" ]] || [[ "${custom_role_definition_id}" == "null" ]]; then
    echo " - Custom role definition not found"
    create_custom_role "${subscription_ids_in_active_directory[@]}"
  else
    echo " - Existing custom role definition found (${custom_role_definition_id})"
  fi

  # retrieve Service principal id
  service_principal_id=$(az ad sp show --id "${application_id}" --query "id" --output tsv)

  if [[ -n "${subscription_id}" ]]; then
    echo "Assigning roles to subscription:"
    # A subscription id was passed in so only apply to that subscription
    apply_roles_to_subscription "${subscription_id}" "${service_principal_id}"
  else
    # Apply to all subscriptions in Active Directory
    echo "Assigning roles to ${#subscription_ids_in_active_directory[@]} subscriptions:"
    for subscription in "${subscription_ids_in_active_directory[@]}"; do
      apply_roles_to_subscription "${subscription}" "${service_principal_id}"
    done
  fi

  # display information about the newly created App Registration
  echo "Finished."
  echo " - Active Directory Tenant id: ${tenant_id}"
  echo " - App Registration name: ${application_display_name}"
  echo " - Application id: ${application_id}"
  echo " - Custom role name: ${CUSTOM_ROLE_NAME}"

  if [[ "${CREATE_APP}" == 'true' ]]; then
    echo " - Application Secret key: ${application_key_value}"
    echo "Please note that this is the only time the Application Secret key will be displayed."
  fi

}

main "$@"
