#!/bin/bash
#
# Create and apply the Cloud One Conformity custom role and Reader role to subscriptions

# This will stop the script when an error is returned from any of the CLI commands
set -e

readonly BRANCH="master"
readonly GITHUB_URI="https://raw.githubusercontent.com/cloudconformity/azure-onboarding-scripts/${BRANCH}"
readonly CUSTOM_ROLE_NAME="Custom Role - Cloud One Conformity"

check_for_custom_role_availability() {
  echo "Checking if custom \"${CUSTOM_ROLE_NAME}\" role definition has been created..."
  custom_role_definition_id=$(az role definition list --name "${CUSTOM_ROLE_NAME}" --query "[0].name" --output tsv)
}

create_custom_role() {
  local subscription_ids_in_active_directory=("$@")
  local prefixed_subscription_ids
  local attempts_to_retrieve_role=0

  echo "Creating custom \"${CUSTOM_ROLE_NAME}\" role definition"

  # generate set of assignable scopes for the custom role
  for subscription in "${subscription_ids_in_active_directory[@]}"; do
    # prefix subscription id with "/subscriptions/" as is needed when added to the assignable scopes
    prefixed_ids=("${prefixed_ids[@]}" "/subscriptions/${subscription}")
  done

  # convert bash array into a JSON array so can be passed to role creation
  prefixed_subscription_ids=$(printf '%s\n' "${prefixed_ids[@]}" | jq -R . | jq -s .)

  az deployment sub create \
    --location eastus \
    --template-uri "${GITHUB_URI}/roleDefinition/create/deploy.json" \
    --parameters \
    "${GITHUB_URI}/roleDefinition/create/deploy.parameters.json" \
    roleName="${CUSTOM_ROLE_NAME}" \
    subscriptionIds="${prefixed_subscription_ids}" > /dev/null

  # It can take a bit of time for the role to be available to use so query until it is available
  while [[ -z "${custom_role_definition_id}" ]] && [[ attempts_to_retrieve_role -lt 5 ]]; do
    sleep 5
    attempts_to_retrieve_role=$((attempts_to_retrieve_role + 1))
    check_for_custom_role_availability
  done

  if [[ -z "${custom_role_definition_id}" ]] || [[ "${custom_role_definition_id}" == "null" ]]; then
    echo "Error: Custom role creation failed"
    exit 1
  fi

  echo "Custom \"${CUSTOM_ROLE_NAME}\" role definition created (${custom_role_definition_id})"
}

apply_roles_to_subscription() {
  local subscription_id="${1}"
  local service_principal_id="${2}"
  local is_custom_role_assigned
  local is_reader_role_assigned

  echo "- Subscription: ${subscription_id}"
  echo "  - Checking custom role assignment..."
  is_custom_role_assigned=$(az role assignment list \
    --role "${custom_role_definition_id}" \
    --subscription="${subscription_id}" \
    --assignee "${service_principal_id}" \
    --query "[0].id" \
    --output tsv)

  if [[ -z "${is_custom_role_assigned}" ]] || [[ "${is_custom_role_assigned}" == "null" ]]; then
    echo "  - Assigning custom role..."
    az deployment sub create \
      --location eastus \
      --subscription="${subscription_id}" \
      --template-uri "${GITHUB_URI}/roleAssignment/customRoleDeploy.json" \
      --parameters \
      principalId="${service_principal_id}" \
      roleDefinitionId="${custom_role_definition_id}" \
      subscriptionId="${subscription_id}" > /dev/null
  fi

  echo "  - Custom role assigned"

  echo "  - Checking built-in \"Reader\" role assignment..."
  # retrieve built-in "Reader" role
  reader_role_id=$(az role definition list --name Reader --query "[0].name" --output tsv)

  # check if role is already assigned
  is_reader_role_assigned=$(az role assignment list \
    --role "${reader_role_id}" \
    --subscription="${subscription_id}" \
    --assignee "${service_principal_id}" \
    --query "[0].id" \
    --output tsv)

  if [[ -z "${is_reader_role_assigned}" ]] || [[ "${is_reader_role_assigned}" == "null" ]]; then
    echo "  - Assigning built-in \"Reader\" role..."
    az role assignment create \
      --role Reader \
      --assignee "${service_principal_id}" \
      --subscription "${subscription_id}" > /dev/null
  fi

  echo "  - \"Reader\" role assigned"
}

main() {
  local application_id
  local subscription_id
  local subscription_ids_in_active_directory
  local service_principal_id

  if [ ! -x "$(command -v jq)" ]; then
    echo "Error: jq is required to be installed to run this script" >&2
    exit 1
  fi

  # capture CLI arguments
  while [ "${1}" != "" ]; do
    case "${1}" in
    -a | --application-id)
      shift
      application_id="${1}"
      ;;
    -s | --subscription-id)
      shift
      subscription_id="${1}"
      ;;
    esac
    shift
  done

  if [[ -z "${application_id}" ]]; then
    echo "Error: --application-id argument is required" >&2
    exit 1
  fi

  # This will set a global variable if the custom role has been created
  check_for_custom_role_availability

  # retrieving Tenant id for Active Directory
  tenant_id=$(az ad sp show --id "${application_id}" --query "appOwnerTenantId" --output tsv)

  # retrieve list of all subscriptions in the Active Directory and convert into a bash array
  subscription_ids_in_active_directory=()
  # Bash v3 supported method of converting to an array ref: https://github.com/koalaman/shellcheck/wiki/SC2207
  while IFS='' read -r line; do
    subscription_ids_in_active_directory+=("$line");
  done < <(az account list --query "[?tenantId=='${tenant_id}'].id" --output tsv)

  if [[ -z "${custom_role_definition_id}" ]] || [[ "${custom_role_definition_id}" == "null" ]]; then
    echo "Custom role definition not found"
    create_custom_role "${subscription_ids_in_active_directory[@]}"
  else
    echo "Existing custom \"${CUSTOM_ROLE_NAME}\" role definition found (${custom_role_definition_id})"
  fi

  # retrieve Service principal id
  service_principal_id=$(az ad sp show --id "${application_id}" --query "objectId" --output tsv)

  echo "Assigning roles to subscription(s):"
  if [[ -n "${subscription_id}" ]]; then
    # A subscription id was passed in so only apply to that subscription
    apply_roles_to_subscription "${subscription_id}" "${service_principal_id}"
  else
    # Apply to all subscriptions in Active Directory
    for subscription in "${subscription_ids_in_active_directory[@]}"; do
      apply_roles_to_subscription "${subscription}" "${service_principal_id}"
    done
  fi
}

main "$@"
