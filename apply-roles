#!/bin/bash
#
# Create and apply both Conformity custom access policy and Reader role to subscriptions

# This will stop the script when an error is returned from any of the CLI commands
set -e

readonly BRANCH="master"
readonly GITHUB_URI="https://raw.githubusercontent.com/cloudconformity/azure-onboarding-scripts/${BRANCH}"
readonly CUSTOM_ROLE_NAME="Custom Role - Cloud One Conformity"

apply_roles_to_subscription() {
  local subscription_id="${1}"

  echo "Checking custom role assignment for subscription - ${subscription_id}"
  is_custom_role_assigned=$(az role assignment list \
    --role "${reader_role_id}" \
    --subscription="${subscription_id}" \
    --assignee "${principal_id}" \
    --query "[0].id" \
    --output tsv)

  if [[ -z "${is_custom_role_assigned}" ]] || [[ "${is_custom_role_assigned}" == "null" ]]; then
    echo "Assigning custom role to service principal"
    az deployment sub create \
      --location eastus \
      --subscription="${subscription_id}" \
      --template-uri "${GITHUB_URI}/roleAssignment/customRoleDeploy.json" \
      --parameters \
      principalId="${principal_id}" \
      roleDefinitionId="${role_definition_id}" \
      subscriptionId="${subscription_id}"
    echo "Custom role assigned to service principal"
  fi

  echo "Custom role assigned"

  echo "Checking built-in \"Reader\" role assignment"
  # retrieve built-in "Reader" role
  reader_role_id=$(az role definition list --name Reader --query "[0].name" --output tsv)
  # check if role is already assigned
  is_reader_role_assigned=$(az role assignment list \
    --role "${reader_role_id}" \
    --subscription="${subscription_id}" \
    --assignee "${principal_id}" \
    --query "[0].id" \
    --output tsv)

  if [[ -z "${is_reader_role_assigned}" ]] || [[ "${is_reader_role_assigned}" == "null" ]]; then
    echo "Assigning built-in \"Reader\" role to service principal"
    az deployment sub create \
      --location eastus \
      --subscription="${subscription_id}" \
      --template-uri "${GITHUB_URI}/roleAssignment/readerRoleDeploy.json" \
      --parameters \
      principalId="${principal_id}" \
      roleDefinitionId="${reader_role_id}"
  fi

  echo "\"Reader\" role assigned"
}

main() {
  local application_id
  local subscription_id

  if [ ! -x "$(command -v jq)" ]; then
    echo "Error: jq is required to be installed to run this script" >&2
    exit 1
  fi

  # capture CLI arguments
  while [ "${1}" != "" ]; do
    case "${1}" in
    -a | --application-id)
      shift
      application_id="${1}"
      ;;
    -s | --subscription-id)
      shift
      subscription_id="${1}"
      ;;
    esac
    shift
  done

  if [[ -z "${application_id}" ]]; then
    echo "Error: --application-id argument is required" >&2
    exit 1
  fi

  echo "Searching for existing custom \"${CUSTOM_ROLE_NAME}\" role definition"
  role_definition_id=$(az role definition list --name "${CUSTOM_ROLE_NAME}" --query "[0].name" --output tsv)

  # retrieving Tenant id for Active Directory
  tenant_id=$(az ad sp show --id "${application_id}" --query "appOwnerTenantId" --output tsv)

  # retrieve list of all subscriptions in the tenant and convert into a bash array
  readarray -t subscription_ids < <(az account list --query "[?tenantId=='${tenant_id}'].id" --output tsv)

  if [[ -z "${role_definition_id}" ]] || [[ "${role_definition_id}" == "null" ]]; then
    echo "Custom role definition not found"
    echo "Creating custom \"${CUSTOM_ROLE_NAME}\" role definition"

    # generate set of assignable scopes for the custom role
    for subscription in "${subscription_ids[@]}"; do
      # prefix subscription id with "/subscriptions/" as is needed when added to the assignable scopes
      prefixed_ids=("${prefixed_ids[@]}" "/subscriptions/${subscription}")
    done

    # convert bash array into a JSON array so can be passed to role creation
    prefixed_subscription_ids=$(printf '%s\n' "${prefixed_ids[@]}" | jq -R . | jq -s .)

    az deployment sub create \
      --location eastus \
      --template-uri "${GITHUB_URI}/roleDefinition/create/deploy.json" \
      --parameters \
      "${GITHUB_URI}/roleDefinition/create/deploy.parameters.json" \
      roleName="${CUSTOM_ROLE_NAME}" \
      subscriptionIds="${prefixed_subscription_ids}"
    echo "Custom role \"${CUSTOM_ROLE_NAME}\" created"
    echo "Waiting for role to be searchable..."
    sleep 10

    role_definition_id=$(az role definition list --name "${CUSTOM_ROLE_NAME}" --query "[0].name" --output tsv)

    if [[ -z "${role_definition_id}" ]] || [[ "${role_definition_id}" == "null" ]]; then
      echo "Error: Custom role creation failed"
      exit 1
    fi
  else
    echo "Existing custom \"${CUSTOM_ROLE_NAME}\" role definition found"
  fi

  echo "Custom role id: ${role_definition_id}"

  # retrieve Service principal id
  principal_id=$(az ad sp show --id "${application_id}" --query "objectId" --output tsv)

  if [[ -n "${subscription_id}" ]]; then
    apply_roles_to_subscription "${subscription_id}"
  else
    for subscription in "${subscription_ids[@]}"; do
      apply_roles_to_subscription "${subscription}"
    done
  fi
}

main "$@"
